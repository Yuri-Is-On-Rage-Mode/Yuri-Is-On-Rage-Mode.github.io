can you make this "<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DevLog | Fri3nds</title>
    <link rel="icon" href="../assets/Fun/richKat.jpg" type="image/x-icon">
    <!-- Press Start 2P -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap">

    <style>
        .main-hero-thing {
            display: flex;
        }

        .main-hero-thing .part-ff-l {
            width:40%;
            padding:10px;
            margin:0px;
            border-radius: 0px;
            border:1px solid #212529;
            background-color: white;
        }

            .hero-heading1{
                color:#212529;
                font-size: 45px;
                font-family: 'Press Start 2P', cursive;
            }

            .hero-heading1-fc{
                color:#212529;
                font-size: 45px;
                font-family: monospace;
            }

            .hero-heading2-fc{
                color:#212529;
                font-size: 30px;
                font-family: monospace;
            }

            .sub-heading1{
                color:#212529;
                font-size: 20px;
                font-family: monospace;
            }

            .sub-heading2{
                color:#212529;
                font-size: 15px;
                font-family: monospace;
            }
        
        .main-hero-thing .part-ff-r {
            width:60%;
            padding:0px;
            margin:0px;
            border-radius: 0px;
            border:1px solid #212529;
            background-color: white;
        }

        .main-hero-thing .part-ff-r img {
            width: 182px;
            height: 182px;
        }

        .b-r {
            position: absolute;
            bottom: 0px;
            right: 10px;
            margin: 0;
        }

        .ff-card-holder {
            display: flex;
        }

        .ff-card-holder .ff-card {
            border-radius: 3px;
            border:1px solid dodgerblue;
            border-top:10px solid dodgerblue;
            padding:10px;
            margin:5px;
        }

        .ff-card-holder .ff-card .text-s1{
            color:#212529;
            font-size:17px;
            font-family: monospace;
        }

        .ff-card-holder-red {
            display: flex;
        }

        .ff-card-holder-red .ff-card {
            border-radius: 3px;
            border:1px solid #f06;
            border-top:10px solid #f06;
            padding:10px;
            margin:5px;
        }
    
        .ff-card-holder-red .ff-card .text-s1{
            color:#212529;
            font-size:17px;
            font-family: monospace;
        }

        .codeanic-code {
            background-color: #212529;
            border-radius: 5px;
            border-top:10px solid #555e68;
            padding:5px;
            color:white;
        }


        .codeanic-code span{
            color:white;
        }

        .codeanic-code ccc {
            /* font-size: 2em;  Adjust the font size as needed */
            font-weight: bold; /* Make text bold for better visibility */
            animation: colorWave 6s infinite; /* 5 seconds duration, infinite loop */
        }

        .codeanic-code com {
            /* font-size: 2em;  Adjust the font size as needed */
            font-weight: bold; /* Make text bold for better visibility */
            animation: colorWave_forCode_Comment 6s infinite; /* 5 seconds duration, infinite loop */
        }

        .codeanic-code ic {
            padding-left:10px;
        }

    </style>
    <style>
        body {
            display: flex;
            min-height: 100vh;
            font-family: monospace;
            margin: 0;
            background-color: #f0f0f0;
        }


        #sidebar h2 {
            font-size: 1.2em;
            color: #fff;
            margin-bottom: 10px;
        }
        #sidebar a {
            display: block;
            color: #007bff;
            text-decoration: none;
            margin: 10px 0;
        }
        #sidebar a:hover {
            text-decoration: underline;
        }
        #main {
            flex: 1;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: #f0f0f0;
        }
        .section-heading {
            font-size: 1.5em;
            color: #333;
            margin: 20px 0;
        }
        .repo-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
        }
        .card {
            background: #f4f4f4;
            border-radius: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            margin: 2px;
            padding: 10px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        .card img {
            border-radius: 50%;
            width: 30px;
            height: 30px;
            object-fit: cover;
            margin-bottom: 10px;
        }
        .card repo-name {
            margin: 0;
            font-size: 15px;
            font-family: monospace;
            color: #212529;
            text-align: center;
        }
        .card p {
            margin: 5px 0;
            color: #666;
            text-align: center;
        }
        .card a {
            color: #007bff;
            text-decoration: none;
        }
        .card a:hover {
            text-decoration: underline;
        }
    </style>
        <style>
            /* Gradient Text Animation */
            @keyframes colorWave {
                0% {
                    color: dodgerblue;
                }
                50% {
                    color: #f06;
                }
                100% {
                    color: dodgerblue;
                }
            }
    
            /* Gradient Text Animation for Python Comment Syntax Highlight */
            @keyframes colorWave_forCode_Comment {
                0% {
                    color: #6a9955; /* Typical green for Python comments */
                }
                50% {
                    color: #567d46; /* A slightly darker shade of green */
                }
                100% {
                    color: #6a9955; /* Back to the typical green */
                }
            }
    
            .grad {
                font-size: 2em; /* Adjust the font size as needed */
                font-weight: bold; /* Make text bold for better visibility */
                animation: colorWave 6s infinite; /* 5 seconds duration, infinite loop */
            }
    
            .grad-ns {
                /* font-size: 2em;  Adjust the font size as needed */
                font-weight: bold; /* Make text bold for better visibility */
                animation: colorWave 6s infinite; /* 5 seconds duration, infinite loop */
            }
        </style>
</head>
<body>
    <div id="sidebar" style="background-color: #212529;border-top-right-radius: 20px;border-bottom-right-radius: 20px;padding:20px;">
        <span class="hero-heading1 grad">Accounts</span>
        <a href="#repos-HamzaS">HamzaS-Is-On-Rage-Mode</a>
        <a href="#repos-fri3nds">Fri3nds-Group-Union</a>
        <a href="#repos-dabang">HamzaS-DaBang</a>
        <a href="#repos-nw">NueWay</a>
    </div>
    <section id="main" class="main-log-bar">
        <div id="log-container">
            <h2 id="repos-HamzaS" class="section-heading">Repositories of HamzaS-Is-On-Rage-Mode</h2>
            <div class="repo-container" id="repos-HamzaS-container"></div>
            <h2 id="repos-fri3nds" class="section-heading">Repositories of Fri3nds-Group-Union</h2>
            <div class="repo-container" id="repos-fri3nds-container"></div>
            <h2 id="repos-dabang" class="section-heading">Repositories of HamzaS-DaBang</h2>
            <div class="repo-container" id="repos-dabang-container"></div>
            <h2 id="repos-nw" class="section-heading">Repositories of NueWay</h2>
            <div class="repo-container" id="repos-nw-container"></div>
        </div>
    </section>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
    const users = [
        { username: 'HamzaS-Is-On-Rage-Mode', avatar: 'https://avatars.githubusercontent.com/u/140644021?v=4' },
        { username: 'Fri3nds-Group-Union', avatar: 'https://avatars.githubusercontent.com/u/140644022?v=4' },
        { username: 'HamzaS-DaBang', avatar: 'https://avatars.githubusercontent.com/u/158317180?v=4' },
        { username: 'NueWay', avatar: 'https://avatars.githubusercontent.com/u/174025911?v=4' }
    ];

    const apiUrls = users.reduce((acc, user) => {
        acc[user.username] = `https://api.github.com/users/${user.username}/repos`;
        return acc;
    }, {});

    const logContainers = {
        'HamzaS-Is-On-Rage-Mode': document.getElementById('repos-HamzaS-container'),
        'Fri3nds-Group-Union': document.getElementById('repos-fri3nds-container'),
        'HamzaS-DaBang': document.getElementById('repos-dabang-container'),
        'NueWay': document.getElementById('repos-nw-container')
    };

    const displayRepos = (username, repos) => {
        const container = logContainers[username];
        container.innerHTML = ''; // Clear previous content
        if (Array.isArray(repos) && repos.length > 0) {
            repos.forEach(repo => {
                const card = document.createElement('div');
                card.className = 'card';

                card.innerHTML = `
                    <span class="repo-name"><span style="font-size:16px;color:purple;font-family:monospace;">@</span><a href="https://github.com/${repo.owner.login}" target="_blank">${username}</a><span style="font-size:16px;color:purple;font-family:monospace;">/</span><a href="${repo.html_url}" target="_blank">${repo.name}</a></span>
                `;
                container.appendChild(card);
            });
        } else {
            container.innerHTML = '<p>No repositories found.</p>';
        }
    };

    const displayRandomError = (username) => {
        const container = logContainers[username];
        container.innerHTML = `
            <p>Oops! Something went wrong 😕. Please try again later or contact support. 🚀</p>
            <div class="card" style="background: #f8d7da; border-color: #f5c6cb;">
                <p style="color: #721c24; font-weight: bold;">Error fetching repositories for ${username}. 📉</p>
                <p>But don't worry, you can always <a href="https://github.com/${username}" target="_blank">visit the GitHub page directly</a>. 💡</p>
            </div>
        `;
    };

    const loadFromLocal = () => {
        fetch('./Repos.json')
            .then(response => response.json())
            .then(data => {
                users.forEach(user => {
                    const repos = data[user.username] || [];
                    displayRepos(user.username, repos);
                });
            })
            .catch(error => {
                console.error('Error loading local Repos.json:', error);
                users.forEach(user => {
                    displayRandomError(user.username);
                });
            });
    };

    const saveToLocal = (username, repos) => {
        fetch('./Repos.json', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ [username]: repos })
        })
        .catch(error => console.error('Error saving Repos.json:', error));
    };

    users.forEach(user => {
        fetch(apiUrls[user.username])
            .then(response => response.json())
            .then(repos => {
                if (Array.isArray(repos) && repos.length > 0) {
                    displayRepos(user.username, repos);
                    saveToLocal(user.username, repos);
                } else {
                    displayRandomError(user.username);
                }
            })
            .catch(error => {
                console.error(`Error fetching repos for ${user.username}:`, error);
                loadFromLocal();
            });
    });
});

            const users = [
                { username: 'HamzaS-Is-On-Rage-Mode', avatar: 'https://avatars.githubusercontent.com/u/140644021?v=4' },
                { username: 'Fri3nds-Group-Union', avatar: 'https://avatars.githubusercontent.com/u/140644022?v=4' },
                { username: 'HamzaS-DaBang', avatar: 'https://avatars.githubusercontent.com/u/158317180?v=4' },
                { username: 'NueWay', avatar: 'https://avatars.githubusercontent.com/u/174025911?v=4' }
            ];
            const apiUrls = users.reduce((acc, user) => {
                acc[user.username] = `https://api.github.com/users/${user.username}/repos`;
                return acc;
            }, {});
            const logContainers = {
                'HamzaS-Is-On-Rage-Mode': document.getElementById('repos-HamzaS-container'),
                'Fri3nds-Group-Union': document.getElementById('repos-fri3nds-container'),
                'HamzaS-DaBang': document.getElementById('repos-dabang-container'),
                'NueWay': document.getElementById('repos-nw-container')
            };

            users.forEach(user => {
                fetch(apiUrls[user.username])
                    .then(response => response.json())
                    .then(repos => {
                        if (Array.isArray(repos) && repos.length > 0) {
                            repos.forEach(repo => {
                                const card = document.createElement('div');
                                card.className = 'card';

                                card.innerHTML = `
                                    <!-- <img src="${user.avatar}" alt="Avatar"> -->
                                    <span class="repo-name"><span style="font-size:16px;color:purple;font-family:monospace;">@</span><a href="https://github.com/${repo.owner.login}" target="_blank">${user.username}</a><span style="font-size:16px;color:purple;font-family:monospace;">/</span><a href="${repo.html_url}" target="_blank">${repo.name}</a></span>
                                    <!-- <p>${repo.description || 'No description available'}</p> -->
                                    <!-- <p>Stars: ${repo.stargazers_count} | Forks: ${repo.forks_count} | Issues: ${repo.open_issues_count}</p> -->
                                `;
                                logContainers[user.username].appendChild(card);
                            });
                        } else {
                            logContainers[user.username].innerHTML = '<p>No repositories found.</p>';
                        }
                    })
                    .catch(error => {
                        console.error(`Error fetching repos for ${user.username}:`, error);
                        logContainers[user.username].innerHTML = '<p>Failed to load repositories.</p>';
                    });
            });
        });
    </script>
</body>
</html>
" with a little more advancements like the following:

1. always try to load repos through github api first, if failed then read the Repos.json file.
2. when github api worked and repos loaded then also saev the repo json data in Repos.json file for later use